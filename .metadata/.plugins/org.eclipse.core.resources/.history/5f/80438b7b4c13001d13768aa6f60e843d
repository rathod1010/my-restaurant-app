package com.restaurant.repository;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

import java.util.ArrayList;
import java.util.List;


import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import com.cg.model.Book;
import com.restaurant.model.Restaurant;

@ExtendWith(SpringExtension.class)
@SpringBootTest
class RestaurantRepositoryTest {

	@Autowired
	private RestaurantRepository restaurantRepository;

	@Test
	void givenRestaurantShouldReturnRestaurantObject() {
		Restaurant r1 = new Restaurant(1, "bawarachi", 20, "non veg");
		restaurantRepository.save(r1);
		Restaurant r2 = restaurantRepository.findById(r1.getRestaurantId()).get();
		assertNotNull(r2);
		assertEquals(r1.getRestaurantName(), r2.getRestaurantName());
	}
	
	@Test
	void testSaveRestaurant()
	{
		
		Book book = new Book(4,"battle","james",1997,197);
		bookRepository.save(book);
		Book newBook = bookRepository.findById(book.getBookId()).get();
		assertNotNull(newBook);
		assertEquals(book.getBookId(), newBook.getBookId());
		
	}


	@Test
	void getAllMustReturnAllBooks()
	{
		Book b3 = new Book(3, "the", "james", 1992, 192);
		Book b4 = new Book(4, "man", "elizabeth", 1995, 143);
		bookRepository.save(b3);
		bookRepository.save(b4);
		List<Book> bookList = (List<Book>) bookRepository.findAll();
		assertEquals("man", bookList.get(2).getBookTitle());
		
	}

	@Test
	void testDeleteBook() {
		Book b5 = new Book(5, "boy", "ram", 1998, 299);
		bookRepository.save(b5);
		bookRepository.deleteById(b5.getBookId());
		assertEquals(bookRepository.findById(5),null);

	}
	
	   @Test
	   void testFindAll() {
		Book b4 = new Book(4, "man", "elizabeth", 1995, 143);
		bookRepository.save(b4);
	      List<Book> result = new ArrayList<>();
	      bookRepository.findAll().forEach(e -> result.add(e));
	      assertEquals(result.size(), 1);	     
	   }

}
