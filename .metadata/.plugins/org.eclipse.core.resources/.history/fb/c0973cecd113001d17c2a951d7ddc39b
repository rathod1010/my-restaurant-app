package com.cg.controller;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.verify;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultHandlers;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import com.cg.model.Reservation;
import com.cg.model.ResponseBooking;
import com.cg.service.ReservationService;
import com.fasterxml.jackson.databind.ObjectMapper;

@ExtendWith(MockitoExtension.class)
public class ReservationControllerTest {
	
	@Autowired
	private MockMvc mockMvc;
	
	@Mock
	private ReservationService reservationService;
	private  Reservation  reservation;
	private ResponseBooking responseBooking;
	
	@InjectMocks
	private ReservationController reservationController;
	
	@BeforeEach
	public void setUp() {
		reservation= new Reservation(1,5,"22/02/2022","05:00",9,2,2);
		mockMvc = MockMvcBuilders.standaloneSetup(reservationController).build();
	}
	@Test
	void saveReservationControllerTest() throws Exception{
		when(reservationService.bookTable(any(), reservation)).thenReturn(responseBooking);
		mockMvc.perform(post("/reservation/book/table/2")
				.contentType(MediaType.APPLICATION_JSON)
				.content(asJsonString(reservation)))
		        .andExpect(status().isCreated());
		verify(reservationService, times(1)).bookTable(2, reservation);
	
	}
	
	
	
	
	
//	@Test
//	void getUserControllerTest() throws Exception {
//		when(userService.getUserByUsername(user.getUsername())).thenReturn(user);
//		mockMvc.perform(MockMvcRequestBuilders.get("/user/find/raj")
//				.contentType(MediaType.APPLICATION_JSON)
//				.content(asJsonString(user)))
//		        .andDo(MockMvcResultHandlers.print());
//		verify(userService, times(1)).getUserByUsername("raj");
//		
//		
//	}
	
//	@Test
//	void deleteUserControllerTest() throws Exception {
//		
//		userService.deleteUser(user.getUserId());;
//		mockMvc.perform(MockMvcRequestBuilders.delete("/user/delete/1",1)
//				.contentType(MediaType.APPLICATION_JSON)
//				.content(asJsonString(user)))
//		        .andDo(MockMvcResultHandlers.print()).andExpect(status().isOk());
//			
//	}
	
	 
	 
	public static String asJsonString(final Object obj) {
	    try {
	        final ObjectMapper mapper = new ObjectMapper();
	        final String jsonContent = mapper.writeValueAsString(obj);
	        return jsonContent;
	    } catch (Exception e) {
	        throw new RuntimeException(e);
	    }
	}  

}
